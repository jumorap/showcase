<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jumorap.github.io/showcase/docs/shortcodes/corte_1/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/color/</guid><description>Color # Exercise
Implement a color mapping application that helps people who are color blind see the colors around them.
Little Background: # Color blindness, also known as color vision deficiency, is a condition that affects the ability to distinguish colors. It is more common in men than in women and affects approximately 1 in 12 men and 1 in 200 women of Northern European descent. There are different types of color blindness, such as Protanopia, Deuteranopia, and Tritanopia, and they result from the absence or malfunction of certain types of cones in the eye that are responsible for color vision.</description></item><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/depthPerception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/depthPerception/</guid><description>Depth Perception # Exercise Take advantage of monocular cues to implement a 2D sketch to trick the eye into perceiving a 3D scene. Solution # Implementation of Ebbinghaus illusion to use monocular cues to trick the eye into perceiving a 3D scene:
Code Implementation let x1, y1, flag, radio, button, a, x6, y6, x7, y7, y5, x5, y4, x4, y3, x3, y2, x2, z1, z2, z3, z4, z5, z6, z7, lineW, canvasWidth, canvasHeight, delta; canvasWidth = canvasHeight = 700; x1 = y1 = 150; z1 = z2 = z3 = z4 = z5 = z6 = z7 = 70; flag = 1; radio = 80 lineW = 20; delta = 0.</description></item><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/machBands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/machBands/</guid><description>Mach Bands # Exercise
Develop a terrain visualization application. Check out the 3D terrain generation with Perlin noise coding train tutorial.
Solution # Implementation of a terrain visualization application in P5 that uses Perlin noise to generate a 3D terrain:
Code Implementation let terrain; let scl = 8; let cols, rows; let startX, startY; let rotX = -0.8; let rotY = 0; let canRotate = false; const DARK_BLUE = [0, 85, 255]; const MEDIUM_BLUE = [0, 110, 255]; const LIGHT_BLUE = [0, 100, 255]; const WHITE = [255, 255, 255]; const GREEN = [100, 180, 30]; const DARK_GREEN = [61, 150, 30]; const SUPER_DARK_GREEN = [61, 130, 61]; const BROWN = [79, 60, 46]; const MIN_HEIGHT_BLUE = -30; const MAX_HEIGHT_WHITE = 40; const MEDIUM_HEIGHT_BROWN = 30; const MAX_HEIGHT_GREEN = 25; const wMap = 800; const hMap = 800; function setup() { createCanvas(wMap, hMap, WEBGL); cols = floor(width / scl); rows = floor(height / scl); terrain = generateTerrain(cols, rows); } function draw() { background(0); if (canRotate) { // Calculate the rotation based on the mouse movement let deltaX = mouseX - startX; let deltaY = mouseY - startY; rotY += deltaX * 0.</description></item><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/masking/</guid><description>Masking # Exercise
Implement a kinegram and some moir√© patterns which are close related visual phenomena to masking.
Little Background: # Kinegrams are two-dimensional images that appear to move or animate when viewed from different angles or under different lighting conditions. They are typically created by printing or engraving a pattern onto a flat surface and then placing a transparent overlay on top of the pattern that contains a second, complementary pattern.</description></item><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/SpatialCoherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/SpatialCoherence/</guid><description>Spatial Coherence # Exercise
Spatial coherence is the visual phenomenon present all across nature whereby the perceived colors of two given points within a region of interest tend to vary more according to their relative distance.
Exercise Implement a pixelator video application and perform a benchmark of the results (color avg vs spatial coherence). How would you assess the visual quality of the results?
Solution # Implemention of a pixelator video application:</description></item></channel></rss>