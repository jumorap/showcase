<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jumorap.github.io/showcase/docs/shortcodes/corte_1/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/color/</guid><description>Color # Exercise
Implement a color mapping application that helps people who are color blind see the colors around them.
Solution # Here&amp;rsquo;s an implementation of a color mapping application in P5 that can help people who are color blind see the colors around them:
Code Implementation // Define a color map for color blindness correction let colorMapArr = [ [[0, 0, 0], &amp;#34;black&amp;#34;], [[255, 255, 255], &amp;#34;white&amp;#34;], [[128, 128, 128], &amp;#34;gray&amp;#34;], [[230, 25, 75], &amp;#34;red&amp;#34;], [[60, 180, 75], &amp;#34;green&amp;#34;], [[0, 0, 255], &amp;#34;blue&amp;#34;], [[255, 225, 25], &amp;#34;yellow&amp;#34;], [[145, 30, 180], &amp;#34;purple&amp;#34;], [[255, 165, 0], &amp;#34;orange&amp;#34;], [[255, 192, 203], &amp;#34;pink&amp;#34;], [[165, 42, 42], &amp;#34;brown&amp;#34;], [[0, 128, 128], &amp;#34;teal&amp;#34;], [[230, 190, 255], &amp;#34;lavender&amp;#34;], [[128, 0, 0], &amp;#34;maroon&amp;#34;], [[170, 255, 195], &amp;#34;mint&amp;#34;], [[128, 128, 0], &amp;#34;olive&amp;#34;], [[255, 215, 180], &amp;#34;peach&amp;#34;], [[0, 0, 128], &amp;#34;navy&amp;#34;], [[0, 255, 255], &amp;#34;cyan&amp;#34;], [[255, 0, 255], &amp;#34;magenta&amp;#34;], [[255, 250, 200], &amp;#34;beige&amp;#34;], [[64, 224, 208], &amp;#34;turquoise&amp;#34;], [[255, 215, 0], &amp;#34;gold&amp;#34;], [[192, 192, 192], &amp;#34;silver&amp;#34;], [[205, 127, 50], &amp;#34;bronze&amp;#34;], [[181, 166, 66], &amp;#34;brass&amp;#34;], [[184, 115, 51], &amp;#34;copper&amp;#34;], [[170, 69, 69], &amp;#34;pewter&amp;#34;], [[224, 17, 95], &amp;#34;ruby&amp;#34;], [[8, 37, 103], &amp;#34;sapphire&amp;#34;], [[80, 200, 120], &amp;#34;emerald&amp;#34;], [[153, 50, 204], &amp;#34;amethyst&amp;#34;], [[194, 184, 9], &amp;#34;citrine&amp;#34;], [[204, 198, 0], &amp;#34;topaz&amp;#34;], [[57, 204, 204], &amp;#34;peridot&amp;#34;], [[135, 67, 34], &amp;#34;aquamarine&amp;#34;], [[162, 54, 54], &amp;#34;garnet&amp;#34;], [[255, 188, 215], &amp;#34;opal&amp;#34;], [[53, 56, 57], &amp;#34;onyx&amp;#34;], [[240, 248, 255], &amp;#34;pearl&amp;#34;], [[255, 127, 80], &amp;#34;coral&amp;#34;], [[255, 191, 0], &amp;#34;amber&amp;#34;] ]; //See: https://gist.</description></item><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/depthPerception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/depthPerception/</guid><description>Depth Perception # Exercise Take advantage of monocular cues to implement a 2D sketch to trick the eye into perceiving a 3D scene. Solution # Implementation of Ebbinghaus illusion to use monocular cues to trick the eye into perceiving a 3D scene:
Code Implementation let x1, y1, flag, radio, button, a, x6, y6, x7, y7, y5, x5, y4, x4, y3, x3, y2, x2, z1, z2, z3, z4, z5, z6, z7, lineW, canvasWidth, canvasHeight, delta; canvasWidth = canvasHeight = 700; x1 = y1 = 150; z1 = z2 = z3 = z4 = z5 = z6 = z7 = 70; flag = 1; radio = 80 lineW = 20; delta = 0.</description></item><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/machBands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/machBands/</guid><description>Mach Bands # Exercise
Develop a terrain visualization application. Check out the 3D terrain generation with Perlin noise coding train tutorial.
Solution # Implementation of a terrain visualization application in P5 that uses Perlin noise to generate a 3D terrain:
Code Implementation let terrain; let scl = 8; let cols, rows; let startX, startY; let rotX = -0.8; let rotY = 0; let canRotate = false; const DARK_BLUE = [0, 85, 255]; const MEDIUM_BLUE = [0, 110, 255]; const LIGHT_BLUE = [0, 100, 255]; const WHITE = [255, 255, 255]; const GREEN = [100, 180, 30]; const DARK_GREEN = [61, 150, 30]; const SUPER_DARK_GREEN = [61, 130, 61]; const BROWN = [79, 60, 46]; const MIN_HEIGHT_BLUE = -30; const MAX_HEIGHT_WHITE = 40; const MEDIUM_HEIGHT_BROWN = 30; const MAX_HEIGHT_GREEN = 25; const wMap = 800; const hMap = 800; function setup() { createCanvas(wMap, hMap, WEBGL); cols = floor(width / scl); rows = floor(height / scl); terrain = generateTerrain(cols, rows); } function draw() { background(0); if (canRotate) { // Calculate the rotation based on the mouse movement let deltaX = mouseX - startX; let deltaY = mouseY - startY; rotY += deltaX * 0.</description></item><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/masking/</guid><description>Masking # Exercise
Implement a kinegram and some moir√© patterns which are close related visual phenomena to masking.
Solution: # Code Implementation let pic let pic2 let x = 0 let canvassizex = 680; let canvassizey = 575; let imagesize = canvassizex / 2; let tileCount = 0; let mycolor = [0, 0, 0]; let speed = 1; let input; let button; function preload() { pic = loadImage(&amp;#39;/showcase/sketches/kinegram.jpg&amp;#39;); input = createInput(); } function setup() { createCanvas(canvassizex, canvassizey); typeSelect = createRadio(); typeSelect.</description></item><item><title/><link>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/SpatialCoherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jumorap.github.io/showcase/docs/shortcodes/corte_1/SpatialCoherence/</guid><description>Mach Bands # Exercise
Temporal coherence is the visual phenomenon present all across nature whereby the perceived color of a given point within a region of interest tend to vary more according to the elapsed time passed between two given moments.
Implement an animation with keyframes using the nub library for Processing (Java).
Solution # Implementation of an animation with keyframes using the nub library for Processing (Java):
Code Implementation let videoFile; let pixelateByColor = true; let tileCount = 10; function setup() { createCanvas(400, 400); // create a checkbox element and position it on the canvas const checkbox = createCheckbox(&amp;#39;Pixelate by color&amp;#39;, pixelateByColor); checkbox.</description></item></channel></rss>